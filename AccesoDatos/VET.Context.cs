//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using Entidades;
    
    public partial class VETEntidades : DbContext
    {
        public VETEntidades()
            : base("name=VETEntidades")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TVE_Clientes> TVE_Clientes { get; set; }
        public virtual DbSet<TVET_Citas> TVET_Citas { get; set; }
        public virtual DbSet<TVET_DetalleMascota> TVET_DetalleMascota { get; set; }
        public virtual DbSet<TVET_Diagnostico> TVET_Diagnostico { get; set; }
        public virtual DbSet<TVET_Mascotas> TVET_Mascotas { get; set; }
    
        public virtual int EditarCita(Nullable<int> idCita, Nullable<int> idCliente, Nullable<int> idMascota, Nullable<System.DateTime> fechaCita)
        {
            var idCitaParameter = idCita.HasValue ?
                new ObjectParameter("IdCita", idCita) :
                new ObjectParameter("IdCita", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idMascotaParameter = idMascota.HasValue ?
                new ObjectParameter("IdMascota", idMascota) :
                new ObjectParameter("IdMascota", typeof(int));
    
            var fechaCitaParameter = fechaCita.HasValue ?
                new ObjectParameter("FechaCita", fechaCita) :
                new ObjectParameter("FechaCita", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarCita", idCitaParameter, idClienteParameter, idMascotaParameter, fechaCitaParameter);
        }
    
        public virtual int EditarCliente(Nullable<int> id, string nombre, string apellido1, string apellido2, string numTelefono, string correoElectronico)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var numTelefonoParameter = numTelefono != null ?
                new ObjectParameter("NumTelefono", numTelefono) :
                new ObjectParameter("NumTelefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarCliente", idParameter, nombreParameter, apellido1Parameter, apellido2Parameter, numTelefonoParameter, correoElectronicoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EditarDetalles(Nullable<int> idMascota, string raza, Nullable<decimal> peso, string color)
        {
            var idMascotaParameter = idMascota.HasValue ?
                new ObjectParameter("IdMascota", idMascota) :
                new ObjectParameter("IdMascota", typeof(int));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var pesoParameter = peso.HasValue ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(decimal));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EditarDetalles", idMascotaParameter, razaParameter, pesoParameter, colorParameter);
        }
    
        public virtual int EditarDiagnostico(Nullable<int> idDiagnostico, Nullable<int> idCita, string descripcionDiagnostico)
        {
            var idDiagnosticoParameter = idDiagnostico.HasValue ?
                new ObjectParameter("IdDiagnostico", idDiagnostico) :
                new ObjectParameter("IdDiagnostico", typeof(int));
    
            var idCitaParameter = idCita.HasValue ?
                new ObjectParameter("IdCita", idCita) :
                new ObjectParameter("IdCita", typeof(int));
    
            var descripcionDiagnosticoParameter = descripcionDiagnostico != null ?
                new ObjectParameter("DescripcionDiagnostico", descripcionDiagnostico) :
                new ObjectParameter("DescripcionDiagnostico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditarDiagnostico", idDiagnosticoParameter, idCitaParameter, descripcionDiagnosticoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EditarMascota(Nullable<int> idMascota, string nombre, Nullable<int> idCliente)
        {
            var idMascotaParameter = idMascota.HasValue ?
                new ObjectParameter("IdMascota", idMascota) :
                new ObjectParameter("IdMascota", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EditarMascota", idMascotaParameter, nombreParameter, idClienteParameter);
        }
    
        public virtual int EliminarCliente(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarCliente", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EliminarDetalle(Nullable<int> idDetalle)
        {
            var idDetalleParameter = idDetalle.HasValue ?
                new ObjectParameter("IdDetalle", idDetalle) :
                new ObjectParameter("IdDetalle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EliminarDetalle", idDetalleParameter);
        }
    
        public virtual int EliminarDiagnostico(Nullable<int> idDiagnostico)
        {
            var idDiagnosticoParameter = idDiagnostico.HasValue ?
                new ObjectParameter("IdDiagnostico", idDiagnostico) :
                new ObjectParameter("IdDiagnostico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarDiagnostico", idDiagnosticoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> EliminarMascota(Nullable<int> idMascota)
        {
            var idMascotaParameter = idMascota.HasValue ?
                new ObjectParameter("IdMascota", idMascota) :
                new ObjectParameter("IdMascota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("EliminarMascota", idMascotaParameter);
        }
    
        public virtual int InsertarCita(Nullable<int> idCliente, Nullable<int> idMascota, Nullable<System.DateTime> fecCita)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idMascotaParameter = idMascota.HasValue ?
                new ObjectParameter("IdMascota", idMascota) :
                new ObjectParameter("IdMascota", typeof(int));
    
            var fecCitaParameter = fecCita.HasValue ?
                new ObjectParameter("FecCita", fecCita) :
                new ObjectParameter("FecCita", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarCita", idClienteParameter, idMascotaParameter, fecCitaParameter);
        }
    
        public virtual int InsertarCliente(string nombre, string apellido1, string apellido2, string numTelefono, string correoElectronico)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var numTelefonoParameter = numTelefono != null ?
                new ObjectParameter("NumTelefono", numTelefono) :
                new ObjectParameter("NumTelefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarCliente", nombreParameter, apellido1Parameter, apellido2Parameter, numTelefonoParameter, correoElectronicoParameter);
        }
    
        public virtual int InsertarDetalles(Nullable<int> idMascota, string raza, Nullable<decimal> peso, string color)
        {
            var idMascotaParameter = idMascota.HasValue ?
                new ObjectParameter("IdMascota", idMascota) :
                new ObjectParameter("IdMascota", typeof(int));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var pesoParameter = peso.HasValue ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(decimal));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarDetalles", idMascotaParameter, razaParameter, pesoParameter, colorParameter);
        }
    
        public virtual int InsertarDiagnostico(Nullable<int> idCita, string descripcion)
        {
            var idCitaParameter = idCita.HasValue ?
                new ObjectParameter("IdCita", idCita) :
                new ObjectParameter("IdCita", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarDiagnostico", idCitaParameter, descripcionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertarMascota(string nombre, Nullable<int> idCliente)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertarMascota", nombreParameter, idClienteParameter);
        }
    
      
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
